#Указываем образ который будем использовать в качестве исходного
FROM golang:1.15 AS builder

# Устанавливаем директорию в которой будет происходить сборка
WORKDIR $GOPATH/src/application/

#Копируем файлы содержащие информацию о необходимых пакетах
#На это стоит обратить внимание, мы копируем их отдельно от остального кода чтобы ускорить процесс сборки
COPY go.mod .
COPY go.sum .

#Так как эти файлы меняются значительно реже чем основной код, то команда go mod download 
# будет запускаться не каждый раз а только при изменении go.mod и go.sum
RUN go mod download


#Копируем весь остальной код
COPY . .

#Собираем приложение
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix nocgo -o /app .

#После сборки go приложениям не нужно окружение в котором оно собиралось.
#Поэтому мы просто перенесем собранное приложение в новый образ общий вес которого будет значительно меньше предыдущего.
#Многие используют для этих целей абсолютно пустой образ scratch, однако для избавления себя от болей 
# по отладке приложения в случае возникновения проблем стоит использовать какой нибудь в котором есть минимальный набор программ для отладки
# например alpine linux, созданный специально для запуска в docker.

FROM alpine:latest AS runtime-image
#Установим необходимые пакеты, в нашем случае свежие корневые сертификаты. Это обязательно если Ваше приложение делает https запросы.
RUN apk -U add ca-certificates

Скопируем наше приложение из образа-сборщика
COPY --from=builder /app /app

#Сделаем это приложение командой по умолчанию для нашего образа.
CMD ["/app"]
